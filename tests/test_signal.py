import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from bot.core.strategy import analyze_symbol, add_indicators, generate_signal, analyze_trend, analyze_momentum, analyze_volume
from bot.notifications.notifier import send_telegram_message
from bot.config import TIMEFRAME, SYMBOLS, STOP_LOSS_PCT, TAKE_PROFIT_PCT, RSI_OVERSOLD, RSI_OVERBOUGHT
from bot.visualization.visualizer import plot_signal
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–∞"""
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    dates = pd.date_range(start=datetime.now() - timedelta(days=1), periods=100, freq='1min')
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤—ã–∑–æ–≤—É—Ç —Å–∏–≥–Ω–∞–ª
    base_price = 100
    trend = [base_price - i * 0.5 for i in range(100)]  # –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
    volatility = [2 * (i % 3 - 1) for i in range(100)]  # –ù–µ–±–æ–ª—å—à–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    
    data = {
        'open': [trend[i] + volatility[i] for i in range(100)],
        'high': [trend[i] + volatility[i] + 2 for i in range(100)],
        'low': [trend[i] + volatility[i] - 2 for i in range(100)],
        'close': [trend[i] + volatility[i] + 1 for i in range(100)],
        'volume': [1000 + i * 100 for i in range(100)]  # –†–∞—Å—Ç—É—â–∏–π –æ–±—ä–µ–º
    }
    
    df = pd.DataFrame(data, index=dates)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—Ä—É—á–Ω—É—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    df['ema8'] = df['close'].ewm(span=8).mean()
    df['ema13'] = df['close'].ewm(span=13).mean()
    df['ema21'] = df['close'].ewm(span=21).mean()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RSI –≤ –∑–æ–Ω—É –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–≤–µ—á–µ–π
    for i in range(10):
        df.loc[df.index[-(i+1)], 'rsi'] = RSI_OVERBOUGHT + 5
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ –æ–±—ä–µ–º–∞
    df['volume_ma'] = df['volume'].rolling(window=20).mean()
    df['volume_std'] = df['volume'].rolling(window=20).std()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ADX –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
    df['adx'] = 30  # –í—ã—à–µ –ø–æ—Ä–æ–≥–∞ ADX_THRESHOLD (25)
    
    return df

def test_analyze_symbol(symbol, df):
    """–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è analyze_symbol, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        df = add_indicators(df)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º RSI –∏ ADX –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–≤–µ—á–µ–π
        for i in range(10):
            df.loc[df.index[-(i+1)], 'rsi'] = RSI_OVERBOUGHT + 5
            df.loc[df.index[-(i+1)], 'adx'] = 30
        
        # –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π
        trend = analyze_trend(df)
        momentum = analyze_momentum(df)
        volume = analyze_volume(df)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
        logger.info("\n–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π:")
        logger.info(f"–¢—Ä–µ–Ω–¥ EMA: {trend['ema_trend']}")
        logger.info(f"RSI: {momentum['rsi']:.2f} (–°–∏–≥–Ω–∞–ª: {momentum['rsi_signal']})")
        logger.info(f"–¢—Ä–µ–Ω–¥ –æ–±—ä–µ–º–∞: {volume['volume_trend']}")
        logger.info(f"–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (ADX): {trend['trend_strength']:.2f}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        signal = generate_signal(symbol, df)
        
        if signal:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs('charts', exist_ok=True)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –æ—Ç–º–µ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–∞
            chart_filename = plot_signal(df, symbol, TIMEFRAME, signal['signal'], 
                                       signal['price'], signal['stop_loss'], signal['take_profit'])
            
            logger.info(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {chart_filename}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = f"\n{'üü¢' if signal['signal'] == '–ü–û–ö–£–ü–ö–ê' else 'üî¥'} {signal['signal']} {symbol}\n"
            msg += f"–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal['strength']}\n"
            msg += f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal['price']:.2f}$\n"
            msg += f"–°—Ç–æ–ø-–ª–æ—Å—Å: {signal['stop_loss']:.2f}$ ({STOP_LOSS_PCT*100}%)\n"
            msg += f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {signal['take_profit']:.2f}$ ({TAKE_PROFIT_PCT*100}%)\n"
            msg += f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal['position_size']*100:.1f}%\n"
            msg += f"–ü–ª–µ—á–æ: {signal['leverage']}x\n"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞
            analysis = signal['analysis']
            msg += f"\n–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞:\n"
            msg += f"- –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {analysis['trend']['trend_strength']:.2f}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ EMA: {analysis['trend']['ema_trend']}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ MACD: {analysis['trend']['macd_trend']}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ –ò—à–∏–º–æ–∫—É: {analysis['trend']['ichimoku_trend']}\n"
            
            msg += f"\n–ê–Ω–∞–ª–∏–∑ –∏–º–ø—É–ª—å—Å–∞:\n"
            msg += f"- RSI: {analysis['momentum']['rsi']:.2f} ({analysis['momentum']['rsi_signal']})\n"
            msg += f"- –°—Ç–æ—Ö–∞—Å—Ç–∏–∫: {analysis['momentum']['stoch_k']:.2f}/{analysis['momentum']['stoch_d']:.2f}\n"
            msg += f"- Williams %R: {analysis['momentum']['williams_r']:.2f} ({analysis['momentum']['williams_signal']})\n"
            msg += f"- –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: {analysis['momentum']['roc']:.2f}% ({analysis['momentum']['roc_signal']})\n"
            
            msg += f"\n–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞:\n"
            msg += f"- –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞: {'–î–∞' if analysis['volume']['volume_spike'] else '–ù–µ—Ç'}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ –∏–Ω–¥–µ–∫—Å–∞ —Å–∏–ª—ã: {'–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π' if analysis['volume']['force_trend'] else '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π'}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ OBV: {'–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π' if analysis['volume']['obv_trend'] else '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π'}\n"
            
            msg += f"\n–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:\n"
            msg += f"- ATR: {analysis['volatility']['atr']:.2f} ({analysis['volatility']['atr_percent']:.2f}%)\n"
            msg += f"- –®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞: {analysis['volatility']['bb_width']:.2f}\n"
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Telegram
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...")
            send_telegram_message(msg, chart_filename)
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal['signal']}")
        else:
            logger.info("–°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è –≤ generate_signal.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {str(e)}")
        raise

def main():
    # –í—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞—Ä—ã (BTC/USDT)
    symbol = SYMBOLS[0]
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
    df = create_test_data()
    
    logger.info("–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞...")
    test_analyze_symbol(symbol, df)
    
    logger.info("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º.")

if __name__ == "__main__":
    main() 