# strategy.py

from indicators import add_indicators
from notifier import send_telegram_message
from data_fetch import fetch_ohlcv
from config import (
    TIMEFRAME, RSI_OVERSOLD, RSI_OVERBOUGHT, STOCH_OVERSOLD,
    STOCH_OVERBOUGHT, ADX_THRESHOLD, VOLUME_THRESHOLD,
    STOP_LOSS_PCT, TAKE_PROFIT_PCT, LEVERAGE
)
import logging
import pandas as pd
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def analyze_trend(df):
    """–ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    last_row = df.iloc[-1]
    prev_row = df.iloc[-2]
    
    # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ADX
    trend_strength = last_row["adx"]
    is_strong_trend = trend_strength > ADX_THRESHOLD
    
    # –¢—Ä–µ–Ω–¥ –±—ã—Å—Ç—Ä—ã—Ö EMA
    ema_trend = "–±—ã—á–∏–π" if last_row["ema8"] > last_row["ema13"] > last_row["ema21"] else "–º–µ–¥–≤–µ–∂–∏–π"
    
    # –¢—Ä–µ–Ω–¥ MACD —Å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–æ–π
    macd_trend = "–±—ã—á–∏–π" if (last_row["macd"] > last_row["macd_signal"] and 
                              last_row["macd_histogram"] > prev_row["macd_histogram"]) else "–º–µ–¥–≤–µ–∂–∏–π"
    
    # –¢—Ä–µ–Ω–¥ –ò—à–∏–º–æ–∫—É
    ichimoku_trend = "–±—ã—á–∏–π" if (last_row["close"] > last_row["ichimoku_a"] and 
                                  last_row["ichimoku_a"] > last_row["ichimoku_b"]) else "–º–µ–¥–≤–µ–∂–∏–π"
    
    return {
        "trend_strength": trend_strength,
        "is_strong_trend": is_strong_trend,
        "ema_trend": ema_trend,
        "macd_trend": macd_trend,
        "ichimoku_trend": ichimoku_trend
    }

def analyze_momentum(df):
    """–ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∏–º–ø—É–ª—å—Å–∞"""
    last_row = df.iloc[-1]
    prev_row = df.iloc[-2]
    
    # –ê–Ω–∞–ª–∏–∑ RSI —Å –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–µ–π
    rsi = last_row["rsi"]
    rsi_signal = "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω" if rsi < RSI_OVERSOLD else "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω" if rsi > RSI_OVERBOUGHT else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
    
    # –ê–Ω–∞–ª–∏–∑ –°—Ç–æ—Ö–∞—Å—Ç–∏–∫–∞
    stoch_k = last_row["stoch_k"]
    stoch_d = last_row["stoch_d"]
    stoch_signal = "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω" if stoch_k < STOCH_OVERSOLD and stoch_d < STOCH_OVERSOLD else \
                  "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω" if stoch_k > STOCH_OVERBOUGHT and stoch_d > STOCH_OVERBOUGHT else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
    
    # Williams %R
    williams_r = last_row["williams_r"]
    williams_signal = "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω" if williams_r < -80 else "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω" if williams_r > -20 else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
    
    # –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    roc = last_row["rate_of_change"]
    roc_signal = "–±—ã—á–∏–π" if roc > 0 and roc > prev_row["rate_of_change"] else "–º–µ–¥–≤–µ–∂–∏–π"
    
    return {
        "rsi": rsi,
        "rsi_signal": rsi_signal,
        "stoch_k": stoch_k,
        "stoch_d": stoch_d,
        "stoch_signal": stoch_signal,
        "williams_r": williams_r,
        "williams_signal": williams_signal,
        "roc": roc,
        "roc_signal": roc_signal
    }

def analyze_volatility(df):
    """–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ü–µ–Ω—ã"""
    last_row = df.iloc[-1]
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
    bb_width = last_row["bb_width"]
    price_position = (last_row["close"] - last_row["bb_lower"]) / (last_row["bb_upper"] - last_row["bb_lower"])
    
    # –ê–Ω–∞–ª–∏–∑ ATR
    atr = last_row["atr"]
    atr_percent = (atr / last_row["close"]) * 100
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ü–µ–Ω—ã
    body_size = last_row["body_size"]
    upper_shadow = last_row["upper_shadow"]
    lower_shadow = last_row["lower_shadow"]
    
    return {
        "bb_width": bb_width,
        "price_position": price_position,
        "atr": atr,
        "atr_percent": atr_percent,
        "body_size": body_size,
        "upper_shadow": upper_shadow,
        "lower_shadow": lower_shadow,
        "is_volatile": bb_width > df["bb_width"].mean() * VOLUME_THRESHOLD
    }

def analyze_volume(df):
    """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—ä–µ–º–∞ –∏ —Å–∏–ª—ã"""
    last_row = df.iloc[-1]
    prev_row = df.iloc[-2]
    
    # –¢—Ä–µ–Ω–¥ –æ–±—ä–µ–º–∞
    volume_trend = df["volume"].iloc[-5:].mean() > df["volume"].iloc[-10:-5].mean()
    
    # –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞
    volume_spike = last_row["volume"] > (df["volume_ma"].iloc[-1] + 2 * df["volume_std"].iloc[-1])
    
    # –ò–Ω–¥–µ–∫—Å —Å–∏–ª—ã
    force_index = last_row["force_index"]
    force_trend = force_index > prev_row["force_index"]
    
    # –¢—Ä–µ–Ω–¥ OBV
    obv_trend = last_row["obv"] > prev_row["obv"]
    
    return {
        "volume_trend": volume_trend,
        "volume_spike": volume_spike,
        "force_index": force_index,
        "force_trend": force_trend,
        "obv_trend": obv_trend,
        "vwap": last_row["vwap"]
    }

def calculate_position_size(price, atr):
    """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    risk_per_trade = 0.01  # 1% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    stop_loss_atr = 2  # –°—Ç–æ–ø-–ª–æ—Å—Å –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö ATR
    
    stop_loss = atr * stop_loss_atr
    position_size = risk_per_trade / (stop_loss / price)
    
    return min(position_size, 1.0)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 100% –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–∞—Ä–∂–∏

def generate_signal(symbol, df):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    trend = analyze_trend(df)
    momentum = analyze_momentum(df)
    volatility = analyze_volatility(df)
    volume = analyze_volume(df)
    
    last_row = df.iloc[-1]
    close_price = last_row["close"]
    
    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏ —É—Ä–æ–≤–Ω–µ–π —Å—Ç–æ–ø–æ–≤
    position_size = calculate_position_size(close_price, last_row["atr"])
    stop_loss = close_price * (1 - STOP_LOSS_PCT)
    take_profit = close_price * (1 + TAKE_PROFIT_PCT)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π
    logger.info(f"\n–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –¥–ª—è {symbol}:")
    logger.info(f"–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {trend['trend_strength']:.2f} (–ü–æ—Ä–æ–≥: {ADX_THRESHOLD})")
    logger.info(f"RSI: {momentum['rsi']:.2f} (–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω: {RSI_OVERSOLD}, –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω: {RSI_OVERBOUGHT})")
    logger.info(f"–°—Ç–æ—Ö–∞—Å—Ç–∏–∫: {momentum['stoch_k']:.2f}/{momentum['stoch_d']:.2f}")
    logger.info(f"–í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞: {volume['volume_spike']}")
    
    # –£—Å–ª–æ–≤–∏—è –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É (–æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–µ)
    if (trend["is_strong_trend"] and
        (trend["ema_trend"] == "–±—ã—á–∏–π" or trend["macd_trend"] == "–±—ã—á–∏–π") and
        momentum["rsi_signal"] == "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω" and
        (momentum["stoch_signal"] == "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω" or momentum["williams_signal"] == "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω") and
        volume["volume_spike"]):
        
        return {
            "signal": "–ü–û–ö–£–ü–ö–ê",
            "strength": "–°–ò–õ–¨–ù–´–ô",
            "price": close_price,
            "stop_loss": stop_loss,
            "take_profit": take_profit,
            "position_size": position_size,
            "leverage": LEVERAGE,
            "analysis": {
                "trend": trend,
                "momentum": momentum,
                "volatility": volatility,
                "volume": volume
            }
        }
    
    # –£—Å–ª–æ–≤–∏—è –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–µ)
    elif (trend["is_strong_trend"] and
          (trend["ema_trend"] == "–º–µ–¥–≤–µ–∂–∏–π" or trend["macd_trend"] == "–º–µ–¥–≤–µ–∂–∏–π") and
          momentum["rsi_signal"] == "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω" and
          (momentum["stoch_signal"] == "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω" or momentum["williams_signal"] == "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω") and
          volume["volume_spike"]):
        
        return {
            "signal": "–ü–†–û–î–ê–ñ–ê",
            "strength": "–°–ò–õ–¨–ù–´–ô",
            "price": close_price,
            "stop_loss": stop_loss,
            "take_profit": take_profit,
            "position_size": position_size,
            "leverage": LEVERAGE,
            "analysis": {
                "trend": trend,
                "momentum": momentum,
                "volatility": volatility,
                "volume": volume
            }
        }
    
    return None

def analyze_symbol(symbol, exchange):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = fetch_ohlcv(symbol, exchange, timeframe=TIMEFRAME)
        df = add_indicators(df)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
        signal = generate_signal(symbol, df)
        
        if signal:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = f"\n{'üü¢' if signal['signal'] == '–ü–û–ö–£–ü–ö–ê' else 'üî¥'} {signal['signal']} {symbol}\n"
            msg += f"–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal['strength']}\n"
            msg += f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {signal['price']:.2f}$\n"
            msg += f"–°—Ç–æ–ø-–ª–æ—Å—Å: {signal['stop_loss']:.2f}$ ({STOP_LOSS_PCT*100}%)\n"
            msg += f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {signal['take_profit']:.2f}$ ({TAKE_PROFIT_PCT*100}%)\n"
            msg += f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {signal['position_size']*100:.1f}%\n"
            msg += f"–ü–ª–µ—á–æ: {signal['leverage']}x\n"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞
            analysis = signal['analysis']
            msg += f"\n–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞:\n"
            msg += f"- –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {analysis['trend']['trend_strength']:.2f}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ EMA: {analysis['trend']['ema_trend']}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ MACD: {analysis['trend']['macd_trend']}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ –ò—à–∏–º–æ–∫—É: {analysis['trend']['ichimoku_trend']}\n"
            
            msg += f"\n–ê–Ω–∞–ª–∏–∑ –∏–º–ø—É–ª—å—Å–∞:\n"
            msg += f"- RSI: {analysis['momentum']['rsi']:.2f} ({analysis['momentum']['rsi_signal']})\n"
            msg += f"- –°—Ç–æ—Ö–∞—Å—Ç–∏–∫: {analysis['momentum']['stoch_k']:.2f}/{analysis['momentum']['stoch_d']:.2f}\n"
            msg += f"- Williams %R: {analysis['momentum']['williams_r']:.2f} ({analysis['momentum']['williams_signal']})\n"
            msg += f"- –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: {analysis['momentum']['roc']:.2f}% ({analysis['momentum']['roc_signal']})\n"
            
            msg += f"\n–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞:\n"
            msg += f"- –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞: {'–î–∞' if analysis['volume']['volume_spike'] else '–ù–µ—Ç'}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ –∏–Ω–¥–µ–∫—Å–∞ —Å–∏–ª—ã: {'–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π' if analysis['volume']['force_trend'] else '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π'}\n"
            msg += f"- –¢—Ä–µ–Ω–¥ OBV: {'–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π' if analysis['volume']['obv_trend'] else '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π'}\n"
            
            msg += f"\n–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:\n"
            msg += f"- ATR: {analysis['volatility']['atr']:.2f} ({analysis['volatility']['atr_percent']:.2f}%)\n"
            msg += f"- –®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞: {analysis['volatility']['bb_width']:.2f}\n"
            
            send_telegram_message(msg)
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal['signal']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol}: {str(e)}")
        raise
